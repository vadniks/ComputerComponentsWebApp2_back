package com.example.plugins

import com.example.db.models.NAME
import com.example.db.models.PASSWORD
import com.example.db.models.Role
import com.example.db.repo.SessionStorageDatabase
import com.example.db.repo.UsersRepo
import io.ktor.http.*
import io.ktor.server.auth.*
import io.ktor.server.sessions.*
import io.ktor.server.application.*
import io.ktor.server.response.*
import io.ktor.util.*
import java.util.UUID

const val SESSION_USER = "session_user"
const val SESSION_ADMIN = "session_admin"
const val FORM = "form"
const val COOKIE = "cookie"

data class UserTokenPrincipal(val token: String) : Principal

suspend fun ApplicationCall.respondForbidden() = respond(HttpStatusCode.Forbidden)
suspend fun ApplicationCall.respondUnauthorized() = respond(HttpStatusCode.Unauthorized)

private fun sessionConfig(role: Role): SessionAuthenticationProvider.Config<UserTokenPrincipal>.() -> Unit = {
    validate {
        val userId = UsersRepo.getId(it.token)
        if (userId != null && UsersRepo.checkRole(userId, role)) it else null
    }
    challenge { call.respondForbidden() }
}

private val auth: suspend ApplicationCall.(UserPasswordCredential) -> UserTokenPrincipal? = {
    val userId = UsersRepo.checkCredentials(it.name, it.password)
    if (userId == null || userId < 1) null
    else { // TODO: use the client's uuid, which will be generated by the client side (flutter) and will be supplied here with request
        val sessionId = UUID.randomUUID().toString() // TODO: or don't use token at all as cookie data is encrypted anyway
        UsersRepo.setToken(userId, sessionId)
        UserTokenPrincipal(sessionId)
    }
}

fun Application.configureSecurity() {
    install(Authentication) {
        session(SESSION_USER, sessionConfig(Role.USER))
        session(SESSION_ADMIN, sessionConfig(Role.ADMIN))
        form(FORM) {
            userParamName = NAME
            passwordParamName = PASSWORD
            challenge { call.respondUnauthorized() }
            validate(auth)
        }
    }
    install(Sessions) {
        cookie<UserTokenPrincipal>(COOKIE, /*SessionStorageDatabase()*/SessionStorageMemory()) {
            transform(SessionTransportTransformerEncrypt(
                hex("00112233445566778899aabbccddeeff"),
                hex("6819b57a326945c1968f45236589"))
            )
        }
    }
}
